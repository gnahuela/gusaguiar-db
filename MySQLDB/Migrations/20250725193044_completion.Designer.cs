// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MySQLDB.Persistance;

#nullable disable

namespace MySQLDB.Migrations
{
    [DbContext(typeof(CDotsContext))]
    [Migration("20250725193044_completion")]
    partial class completion
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MySQLDB.Entities.AppNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AppNotification");
                });

            modelBuilder.Entity("MySQLDB.Entities.Campaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Days")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DisableOn")
                        .HasColumnType("DATETIME");

                    b.Property<string>("FolderName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Hours")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("InitiateOn")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("NextCampaignId")
                        .HasColumnType("int");

                    b.Property<int?>("PreviousCampaignId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("NextCampaignId");

                    b.HasIndex("PreviousCampaignId");

                    b.ToTable("Campaign");
                });

            modelBuilder.Entity("MySQLDB.Entities.Lead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("DateUnsubscribed")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstNames")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastNames")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Lead");
                });

            modelBuilder.Entity("MySQLDB.Entities.LeadHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("DATETIME");

                    b.Property<int>("LeadId")
                        .HasColumnType("int");

                    b.Property<string>("Page")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("LeadId");

                    b.ToTable("LeadHistory");
                });

            modelBuilder.Entity("MySQLDB.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("DATETIME");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleName = "SuperAdmin"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleName = "Regular"
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleName = "Coach"
                        });
                });

            modelBuilder.Entity("MySQLDB.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConfirmationToken")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("TokenExpiresAt")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "gustavonahuelaguiar@gmail.com",
                            IsVerified = true,
                            Password = "3a14489f6192f9b2d31466c234ed34b3",
                            Username = "Gus"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "super@super.com",
                            IsVerified = true,
                            Password = "1b3231655cebb7a1f783eddf27d254ca",
                            Username = "Super"
                        });
                });

            modelBuilder.Entity("MySQLDB.Entities.UserActivityRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActivityId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasComment("e.g., twelve_areas_balance");

                    b.Property<string>("AreaId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasComment("e.g., finances, health");

                    b.Property<int>("AttemptNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasComment("To group ratings for each take");

                    b.Property<DateTime>("RatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<byte>("Score")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "ActivityId", "AreaId", "AttemptNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_UserActivityRatings_UniqueAttempt");

                    b.ToTable("UserActivityRating");
                });

            modelBuilder.Entity("MySQLDB.Entities.UserCampaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedOn")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("DATETIME");

                    b.Property<int?>("LeadId")
                        .HasColumnType("int");

                    b.Property<int?>("NextCampaignId")
                        .HasColumnType("int");

                    b.Property<int?>("PreviousCampaignId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("LeadId");

                    b.HasIndex("NextCampaignId");

                    b.HasIndex("PreviousCampaignId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCampaign", null, t =>
                        {
                            t.HasCheckConstraint("CK_UserCampaign_UserOrLead", "UserId IS NOT NULL OR LeadId IS NOT NULL");
                        });
                });

            modelBuilder.Entity("MySQLDB.Entities.UserCampaignEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("DATETIME");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("longtext");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FolderName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FullPath")
                        .HasColumnType("longtext");

                    b.Property<int?>("PreviousUserCampaignEmailId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserCampaignId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PreviousUserCampaignEmailId");

                    b.HasIndex("UserCampaignId");

                    b.ToTable("UserCampaignEmail");
                });

            modelBuilder.Entity("MySQLDB.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleId = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            RoleId = 1,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("MySQLDB.Entities.UserToUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserFromId")
                        .HasColumnType("int");

                    b.Property<int>("UserToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserFromId");

                    b.HasIndex("UserToId");

                    b.ToTable("UserToUser");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleId = 4,
                            UserFromId = 2,
                            UserToId = 1
                        });
                });

            modelBuilder.Entity("UserActivityCompletion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActivityId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CompletedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId", "ActivityId" }, "unique_completion")
                        .IsUnique();

                    b.ToTable("UserActivityCompletion");
                });

            modelBuilder.Entity("UserActivityDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActivityId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AreaId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId", "ActivityId", "AreaId" }, "unique_definition")
                        .IsUnique();

                    b.ToTable("UserActivityDefinition");
                });

            modelBuilder.Entity("MySQLDB.Entities.Campaign", b =>
                {
                    b.HasOne("MySQLDB.Entities.Campaign", "NextCampaign")
                        .WithMany()
                        .HasForeignKey("NextCampaignId");

                    b.HasOne("MySQLDB.Entities.Campaign", "PreviousCampaign")
                        .WithMany()
                        .HasForeignKey("PreviousCampaignId");

                    b.Navigation("NextCampaign");

                    b.Navigation("PreviousCampaign");
                });

            modelBuilder.Entity("MySQLDB.Entities.Lead", b =>
                {
                    b.HasOne("MySQLDB.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MySQLDB.Entities.LeadHistory", b =>
                {
                    b.HasOne("MySQLDB.Entities.Lead", "Lead")
                        .WithMany()
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lead");
                });

            modelBuilder.Entity("MySQLDB.Entities.UserActivityRating", b =>
                {
                    b.HasOne("MySQLDB.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MySQLDB.Entities.UserCampaign", b =>
                {
                    b.HasOne("MySQLDB.Entities.Campaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MySQLDB.Entities.Lead", "Lead")
                        .WithMany()
                        .HasForeignKey("LeadId");

                    b.HasOne("MySQLDB.Entities.Campaign", "NextCampaign")
                        .WithMany()
                        .HasForeignKey("NextCampaignId");

                    b.HasOne("MySQLDB.Entities.Campaign", "PreviousCampaign")
                        .WithMany()
                        .HasForeignKey("PreviousCampaignId");

                    b.HasOne("MySQLDB.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Campaign");

                    b.Navigation("Lead");

                    b.Navigation("NextCampaign");

                    b.Navigation("PreviousCampaign");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MySQLDB.Entities.UserCampaignEmail", b =>
                {
                    b.HasOne("MySQLDB.Entities.UserCampaignEmail", "PreviousUserCampaignEmail")
                        .WithMany()
                        .HasForeignKey("PreviousUserCampaignEmailId");

                    b.HasOne("MySQLDB.Entities.UserCampaign", "UserCampaign")
                        .WithMany()
                        .HasForeignKey("UserCampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PreviousUserCampaignEmail");

                    b.Navigation("UserCampaign");
                });

            modelBuilder.Entity("MySQLDB.Entities.UserRole", b =>
                {
                    b.HasOne("MySQLDB.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MySQLDB.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MySQLDB.Entities.UserToUser", b =>
                {
                    b.HasOne("MySQLDB.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MySQLDB.Entities.User", "UserFrom")
                        .WithMany()
                        .HasForeignKey("UserFromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MySQLDB.Entities.User", "UserTo")
                        .WithMany()
                        .HasForeignKey("UserToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UserFrom");

                    b.Navigation("UserTo");
                });

            modelBuilder.Entity("UserActivityCompletion", b =>
                {
                    b.HasOne("MySQLDB.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserActivityDefinition", b =>
                {
                    b.HasOne("MySQLDB.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
